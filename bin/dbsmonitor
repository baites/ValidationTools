#! /usr/bin/env python
# ValidationTools : dbsmonitorr
#
# Developers:
#   Kenneth James Smith
#   Victor Eduardo Bazterra
#
# Descrition:
#   Client application for interacting with DBSMonitor


import pickle

import socket
import RSSListener 
import Configuration

from optparse import OptionParser

usage = "usage: %prog [options]"
parser = OptionParser()
parser.add_option("-r", "--release", dest="release", help="release to be use")
parser.add_option("-l", "--site", action="store", dest="site", default=Configuration.variables['CERNSITE'], help="location of the samples")
parser.add_option("-t", "--trigger", action="store", dest="trigger", default="", help="type of condition for triggering")
parser.add_option("-p", "--port", type="int", dest="port", default=Configuration.variables['DBSMonitorPort'], help="port used by the server")
parser.add_option("-n", "--nopostprocess", action="store_true", dest="nopostprocess", default=False, help="unset postprocess.")
parser.add_option("-q", "--status", action="store_true", dest="status", default=False, help="print all the association")

(options, args) = parser.parse_args()

# Open a channel for communications
server = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
server.bind ( ( 'localhost', options.port + 1 ) )
server.listen ( Configuration.variables['PortPollTime'] )
  
if options.status != True:

  if options.release != None:
    channel = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
    channel.connect ( ( 'localhost', options.port ) )
    message = {}
    message['startlisten'] = { 'release' : options.release, 'site' : options.site, 'trigger' : options.trigger, 'postprocess' : not options.nopostprocess }
    channel.send ( pickle.dumps(message) )
    channel.close()
  else:
    print 'You must enter a release, in the form --release=RELEASENAME'

else:
  # Connect to the server:
  channel = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
  channel.connect ( ( 'localhost', options.port ) )
  message = {}
  message['status'] = {}
  channel.send ( pickle.dumps(message) )
  channel.close()

  # Open a channel for communications
  channel, details = server.accept()
  pool = pickle.loads( channel.recv( 32768 ) )

  counter = {}

  if len(pool) == 0:
    print
    print 'There are not listenings in DBSMonitor'
    print
  else:
    print
    print 'Status for all the listenings in DBSMonitor'
    print '%-20s %-40s %-20s %-20s %-30s' % ('Release', 'Dataset', 'Site', 'Trigger', 'Status' )
    print '=========================================================================================================================================='
    for listenid, listeninfo in pool.iteritems():
      if listeninfo['status'].split(" ")[0] == 'Updated':
        status = 'Updated'
      else:
        status = listeninfo['status'] 
      if counter.has_key(status):
        counter[status] = counter[status] + 1
      else:
        counter[status] = 1
      print '%-20s %-40s %-20s %-20s %-30s' % (listeninfo['release'], listeninfo['dataset'], listeninfo['site'], listeninfo['trigger'], listeninfo['status'] )
    print
    totaljobs = len(pool)
    for status, number  in counter.iteritems():
      print '%-10s jobs %d/%d (%.1f%%)' % (status, number, totaljobs, 100*float(number)/totaljobs)
    print

