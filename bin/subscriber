#! /usr/bin/env python
# ValidationTools : subscriber
#
# Developers:
#   Kenneth James Smith
#   Victor Eduardo Bazterra
#
# Descrition:
#   Suscription application to manipulate dataset subscriptions

import os

from optparse import OptionParser

import Configuration
from Subscription import Subscriber

usage = "usage: %prog [options] arg1 arg2"
parser = OptionParser()
parser.add_option("-f", "--file", action="store", dest="file", default=Configuration.variables['VTRoot']+'/data/subscriptions.xml',  help="name of the map file")
parser.add_option("-v", "--release", dest="release", default=None, help="name of the cmsdrive commands file.")
parser.add_option("-d", "--dataset", dest="dataset", default=None, help="name of the sample to be associated"  )
parser.add_option("-a", "--add", dest="add", default=None, help="add an association to a given cfg file")
parser.add_option("-s", "--set", dest="set", default=None, help="set the interface for a given association")
parser.add_option("-r", "--remove", dest="remove", default=None, help="remove an association to a given cfg file")
parser.add_option("-i", "--interface", action="store", dest="interface", default="fork", help="interface for a given association")
parser.add_option("-m", "--merge", dest="merge", default=None, help="merge suscription files")
parser.add_option("-p", "--print", action="store_true", dest="printa", default=False, help="Print all the association")

(options, args) = parser.parse_args()

saveflag = False

subscriptions = Subscriber()

if options.release != None and options.interface != None:
  filename = Configuration.variables['WorkAreas'] + '/' +  options.release + '/src/' + Configuration.variables['PyCommandFile']
  relval = open(filename, 'r') 
  for line in relval:
    parse = line.split('@@@');
    if len(parse) > 1:
      subscriptions.add('RelVal'+parse[0].split()[0], Configuration.variables['VTRoot']+'/data/EDMtoMEConverter.template', options.interface) 
      saveflag = True
elif options.file != None and os.path.isfile( options.file ) == True :
  subscriptions.read(options.file)
  if options.merge != None:
    subscriptions.read(options.merge)

if options.dataset != None:
  saveflag = True
  if options.add != None and options.interface != None:
    subscriptions.add(options.dataset, options.add, options.interface)
  elif options.set != None and options.interface != None:
    subscriptions.set(options.dataset, options.set, options.interface)
  elif options.remove != None:
    subscriptions.remove(options.dataset, options.remove)

if options.printa == True:
  print subscriptions

if options.file != None and saveflag == True:
  subscriptions.write(options.file)
