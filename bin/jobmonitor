#! /usr/bin/env python
# ValidationTools : jobmonitor 
#
# Developers:
#   Kenneth James Smith
#   Victor Eduardo Bazterra
#
# Descrition:
#   Client application for interacting with JobMonitor

import pickle
import socket

import Configuration

from optparse import OptionParser

usage = "usage: %prog [options] arg1 arg2"
parser = OptionParser()
parser.add_option("-r", "--release", dest="release", help="release to be use")
parser.add_option("-i", "--interface", dest="interface", help="interface to be use")
parser.add_option("-c", "--cfgfile", dest="cfgfile", help="cfgfile to be use")
parser.add_option("-p", "--port", type="int", dest="port", default=Configuration.variables['JobMonitorPort'], help="port used by the server")
parser.add_option("-q", "--status", action="store_true", dest="status", default=False, help="Print all the association")
parser.add_option("-n", "--nopostprocess", action="store_true", dest="status", default=False, help="Unset postprocess.")
parser.add_option("-s", "--stop", action="store_true", dest="stop", default=False, help="Stop the JobMonitor")

(options, args) = parser.parse_args()

# Open a channel for communications
server = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
server.bind ( ( 'localhost', options.port + 1 ) )
server.listen ( Configuration.variables['PortPollTime'] )

if options.status:

  # Connect to the server:
  client = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
  client.connect ( ( 'localhost', options.port ) )
  message = {}
  message['status'] = {}   
  client.send ( pickle.dumps(message) )
  client.close()

  # Open a channel for communications
  channel, details = server.accept()
  pool = pickle.loads( channel.recv( 131072 ) )

  counter = {}

  if len(pool) == 0:
    print
    print 'There are not monitoring jobs in JobMonitor'
    print
  else:
    print 'Status for all the jobs control by JobMonitor'
    print '%-20s %-10s %-60s %-10s %-10s' % ('Release', 'Interface', 'Cfgfile', 'Jobid', 'Status' )
    print '================================================================================================================='
    for listenid, listeninfo in pool.iteritems():
      if counter.has_key(listeninfo['status']):
        counter[listeninfo['status']] = counter[listeninfo['status']] + 1
      else:
        counter[listeninfo['status']] = 1 
      print '%-20s %-10s %-60s %-10s %-10s' % (listeninfo['release'], listeninfo['interface'], listeninfo['cfgfile'], listeninfo['jobid'], listeninfo['status'] )
    print
    totaljobs = len(pool)
    for status, number  in counter.iteritems():
      print '%-10s jobs %d/%d (%.1f%%)' % (status, number, totaljobs, 100*float(number)/totaljobs)
    print

elif options.stop:

  # Connect to the server:
  client = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
  client.connect ( ( 'localhost', options.port ) )
  message = {}
  message['stop'] = {}   
  client.send ( pickle.dumps(message) )
  client.close()

else:
 
  # Connect to the server:
  client = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
  client.connect ( ( 'localhost', options.port ) )
  message = {}
  message['startjob'] = { 'interface' : options.interface, 'release' : options.release, 'cfgfile' : options.cfgfile, 'postprocess' : not options.postprocess }
  client.send ( pickle.dumps(message) )
  client.close()
